package gui.image;

import gui.VentanaPrincipal;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import javax.swing.event.InternalFrameListener;
import sm.cdlt.graphics.geoPoint;
import sm.cdlt.ui.Lienzo2DImage;

/**
 *
 * For contact with me visit https://www.sudano.net or send me a email
 *
 * @author <a href="mailto:cdelatorre@correo.ugr.es">Carlos de al Torre</a>
 * created on 14-abr-2016
 */
public class VentanaInternaImagen extends javax.swing.JInternalFrame {

    /**
     * Para poder devolver mensajes a la ventana principal.
     */
    protected VentanaPrincipal myParent;
    /**
     * Variables que almacena el ancho y alto de la imagen que ponemos dentro de
     * la ventana.
     */
    private int image_width, image_heigth;
    /**
     * Variable que almacena cual es el tipo de imagen que queremos en el Lienzo
     */
    private int image_type;

    /**
     * Ponemos el constructor sin parámetros para que netbeans pueda dibujar el
     * componente.
     */
    public VentanaInternaImagen() {
        super();
        initComponents();
    }

    /**
     * Constructor para crear una ventana interna, se utilizan tres parámetros
     * para darle mas funcionalidad al programa, parent es para indicar cual es
     * el padre de la ventana interna, d es la dimensión que queremos que tenga
     * la ventana interna, t es el tipo de imágenes que queremos crear entro de
     * la ventana interna
     *
     * @param parent [in] Este será el padre de la Ventana.
     * @param d [in] Objeto tipo Dimensión que indica el tamaño de la imagen que
     * queremos dentro de la ventana.
     * @param t [in] Tipo entero que indica el tipo de la imagen a crear.
     */
    public VentanaInternaImagen(VentanaPrincipal parent, Dimension d, int t) {
        super();
        // antes de que se inicialicen los componentes pongo el tamaño
        this.image_width = (int) d.getWidth();
        this.image_heigth = (int) d.getHeight();
        this.image_type = t;
        // inicializo los componentes incluido el lienzo
        initComponents();
        // añado el padre de la ventana
        this.myParent = parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPanel = new javax.swing.JScrollPane();
        JPanelLienzo = new sm.cdlt.ui.Lienzo2DImage(new Dimension(this.image_width, this.image_heigth),this.image_type);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        jScrollPanel.setBorder(null);

        JPanelLienzo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                JPanelLienzoMouseMoved(evt);
            }
        });
        JPanelLienzo.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                JPanelLienzoComponentResized(evt);
            }
        });
        jScrollPanel.setViewportView(JPanelLienzo);

        getContentPane().add(jScrollPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Nos devuelve el Lienzo de la ventana Interna para poder cambiar sus
     * propiedades.
     *
     * @return Devuelve un objeto de tipo Lienzo2D que es donde pintamos.
     */
    public Lienzo2DImage getLienzo() {
        return this.JPanelLienzo;
    }

    /**
     * Con este método podemos asignar el lienzo que vamos a utilizar para
     * pintar la imagen.
     *
     * @param li [in] de tipo Lienzo2DImage sera en donde pintaremos las
     * imágenes.
     */
    public void setLienzo(Lienzo2DImage li) {
        this.JPanelLienzo = li;
        repaint();
    }

    /**
     * Con este método lo que hacemos es poner un panel en la parte izquierda de
     * la ventana por si queremos mostrar cualquier tipo de información, o
     * añadir algún tipo de funcionalidad extra.
     *
     * @param c [in] Será el panel con los controles que añadiremos
     */
    public void setLeftPanel(javax.swing.JPanel c) {
        getContentPane().add(c, java.awt.BorderLayout.WEST);
    }

    /**
     * Con este método lo que hacemos es poner un panel en la parte derecha de
     * la ventana por si queremos mostrar cualquier tipo de información, o
     * añadir algún tipo de funcionalidad extra.
     *
     * @param c [in] Será el panel con los controles que añadiremos
     */
    public void setRightPanel(javax.swing.JPanel c) {
        getContentPane().add(c, java.awt.BorderLayout.EAST);
    }

    /**
     * Método que asigna un manejador al objeto.
     *
     * @param l [in] Será el manejador que controle los eventos del objeto.
     */
    public void setListener(InternalFrameListener l) {
        this.addInternalFrameListener(l);
    }
    
    /**
     * Este método es para cunado el ratón pasa por encima del lienzo.
     * 
     * @param evt [in] acciones relacionadas con el evento.
     */
    private void JPanelLienzoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPanelLienzoMouseMoved
        this.myParent.getLabelMousePos().setText(VentanaPrincipal.getBundle().getString("MOUSE_POS") + " (" + (int) evt.getPoint().getX() + ":" + (int) evt.getPoint().getY() + ")");
        int[] pixel = this.JPanelLienzo.getColorInPos(new geoPoint(evt.getPoint().getX(), evt.getPoint().getY()));
        // para el blanco y negro
        if (pixel.length < 3) {
            this.myParent.getLabelMouseColorPos().setText(VentanaPrincipal.getBundle().getString("COLOR_POS") + " [W/B: " + pixel[0] + "]");
        } else {
            this.myParent.getLabelMouseColorPos().setText(VentanaPrincipal.getBundle().getString("COLOR_POS")
                    + " [R: " + pixel[0]
                    + " G: " + pixel[1]
                    + " B: " + pixel[2]
                    + " ]");
            this.myParent.getLabelMouseViewColorPos().setBackground(new Color(pixel[0], pixel[1], pixel[2]));
        }
        if (this.myParent.getToggleButtonPintar().isSelected()) {
            this.JPanelLienzo.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        } else if (this.myParent.getToggleButtonMover().isSelected()) {
            this.JPanelLienzo.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        } else {
            this.JPanelLienzo.setCursor(Cursor.getDefaultCursor());
        }
        repaint();
    }//GEN-LAST:event_JPanelLienzoMouseMoved

    /**
     * Este método sirve para el redimensionado de la ventana.
     *
     * Como las ventanas internas de java no tienen un evento de resize utilizo
     * el panel que sirve como lienzo para usar su evento resize y como la
     * ventana tiene un BorderLayout pues se redimensiona a la par que la
     * ventana interna.
     *
     * Simplemente cojo la imagen que tiene el lienzo y la vuelvo a setear de
     * esa manera como el evento de setImage auto calcula la posición de la
     * imagen correcta según el tamaño del lienzo solo se calcula la posición de
     * la imagen cuando se setea.
     *
     * @param evt [in] datos del evento al redimensionar la ventana.
     */
    private void JPanelLienzoComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_JPanelLienzoComponentResized
        this.JPanelLienzo.setImage(this.JPanelLienzo.getImage());
    }//GEN-LAST:event_JPanelLienzoComponentResized

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected sm.cdlt.ui.Lienzo2DImage JPanelLienzo;
    private javax.swing.JScrollPane jScrollPanel;
    // End of variables declaration//GEN-END:variables
}
