package gui.video;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import gui.VentanaPrincipal;
import java.awt.image.BufferedImage;
import javax.swing.event.InternalFrameListener;
import sm.cdlt.util.Utils;

/**
 *
 * For contact with me visit https://www.sudano.net or send me a email
 *
 * @author <a href="mailto:cdelatorre@correo.ugr.es">Carlos de al Torre</a>
 * created on 10-jun-2016
 */
public class VentanaInternaWebcam extends javax.swing.JInternalFrame {

    /**
     * Esta es la cámara con la que quiero interactuar.
     */
    private Webcam myCamera;
    /**
     * Variable que almacena la parte visual donde se verá lo que capture la
     * webcam
     */
    private WebcamPanel myVisual;

    /**
     * Constructor para crear una ventana interna
     */
    public VentanaInternaWebcam() {
        super();
        initComponents();
        this.myCamera = Webcam.getDefault();
        this.myCamera.setViewSize(WebcamResolution.VGA.getSize());
        if (this.myCamera != null && VentanaPrincipal.DEBUG) {
            System.out.println("Webcam: " + this.myCamera.getName());
        }
        if (this.myCamera == null && VentanaPrincipal.DEBUG) {
            System.out.println("No webcam detected");
        }
        this.myVisual = new WebcamPanel(myCamera);
        this.jPanelWebCam.add(this.myVisual);
    }

    /**
     * Método para dejar de usar la cámara web
     */
    public void stop() {
        this.myCamera.close();
    }

    /**
     * Método que asigna un manejador al objeto.
     *
     * @param l [in] Será el manejador que controle los eventos del objeto.
     */
    public void setListener(InternalFrameListener l) {
        this.addInternalFrameListener(l);
    }

    /**
     * Método con el cual podemos tomar una captura de lo que se esta viendo a
     * través de la cámara web.
     *
     * @return objeto BufferedImage con la imagen capturada.
     */
    public BufferedImage takePhoto() {
        return Utils.convertImageToType(this.myCamera.getImage(), BufferedImage.TYPE_INT_RGB);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelWebCam = new javax.swing.JPanel();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("WebCam");
        setMinimumSize(new java.awt.Dimension(640, 500));
        setPreferredSize(new java.awt.Dimension(640, 500));

        jPanelWebCam.setLayout(new java.awt.BorderLayout(2, 2));
        getContentPane().add(jPanelWebCam, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelWebCam;
    // End of variables declaration//GEN-END:variables
}
