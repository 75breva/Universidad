package gui.video;

import gui.VentanaPrincipal;
import gui.componets.Item;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.swing.event.InternalFrameListener;
import sm.cdlt.multimedia.ExtendedVideoPlayer;
import sm.cdlt.util.Utils;

/**
 *
 * For contact with me visit https://www.sudano.net or send me a email
 *
 * @author <a href="mailto:cdelatorre@correo.ugr.es">Carlos de al Torre</a>
 * created on 14-abr-2016
 */
public class VentanaInternaJMFPlayer extends javax.swing.JInternalFrame {

    /**
     * Variable que almacena el padre de la ventana actual
     */
    private VentanaPrincipal myParent = null;
    /**
     * Variable que almacena el player completo
     */
    private ExtendedVideoPlayer myPlayer = null;
    /**
     * Variable que almacena la posición en la lista del objeto.
     */
    private int position;
    /**
     * Variable que almacena el componente donde se visualiza el vídeo
     */
    private Component visual = null;
    /**
     * Variable que almacena donde están los controles del player
     */
    private Component controls = null;

    /**
     * Método que se encarga de crear el reproductor en todos los constructores.
     *
     * @param f [in] Fichero que se quiere reproducir.
     */
    private void ConstructorExtra(File f) {
        this.myPlayer = ExtendedVideoPlayer.getInstance(f);
        this.visual = this.myPlayer.getVisual();
        this.controls = this.myPlayer.getControl();
        if (this.visual != null) {
            this.add(this.visual, java.awt.BorderLayout.CENTER);
        }
        if (this.controls != null) {
            this.add(this.controls, java.awt.BorderLayout.SOUTH);
        }
        this.pack();
    }

    /**
     * Creates new form VentanaInternaJMFPlayer
     *
     * @param f [in] Fichero que será reproducido
     */
    public VentanaInternaJMFPlayer(File f) {
        super();
        initComponents();
        this.ConstructorExtra(f);
    }

    /**
     * Constructor por defecto pero con el parámetro en String.
     *
     * @param p [in] Cadena donde se encuentra el fichero que vamos a
     * reproducir.
     */
    public VentanaInternaJMFPlayer(String p) {
        super();
        initComponents();
        this.ConstructorExtra(new File(p));
    }

    /**
     * Constructor con 3 parámetros para dotar de mas opciones a la aplicación
     *
     * @param parent [in] esta es la ventana padre.
     * @param d [in] esta será la dimensión de la ventana.
     * @param i [in] este es el item que se quiere mostrar.
     */
    public VentanaInternaJMFPlayer(VentanaPrincipal parent, Dimension d, Item i) {
        super();
        // inicializo los componentes incluido el lienzo
        initComponents();
        // antes de que se inicialicen los componentes pongo el tamaño
        this.setPreferredSize(d);
        // añado el padre de la ventana
        this.myParent = parent;
        // pongo la posición
        this.position = i.pos;
        // ejecuto el resto
        this.ConstructorExtra(new File(i.path));
    }

    /**
     * Método que detiene la reproducción del archivo.
     */
    public void stop() {
        this.myPlayer.stop();
    }

    /**
     * Método que asigna un manejador al objeto.
     *
     * @param l [in] Será el manejador que controle los eventos del objeto.
     */
    public void setListener(InternalFrameListener l) {
        this.addInternalFrameListener(l);
    }

    /**
     * Método con el cual podemos tomar una captura de lo que se esta viendo en
     * el vídeo.
     *
     * @return objeto BufferedImage con la imagen capturada.
     */
    public BufferedImage takePhoto() {
        return Utils.convertImageToType(this.myPlayer.takePhoto(), BufferedImage.TYPE_INT_RGB);
    }

    /**
     * Con este método podemos saber cual es la posición que ocupa el objeto en
     * la lista de reproducción para poder quitarlo de ella.
     *
     * @return entero indicando la posición en la lista multimedia.
     */
    public int getPositionList() {
        return this.position;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
