package gui.modal;

import gui.VentanaInternaListener;
import gui.image.VentanaInternaImagen;
import gui.image.VentanaInternaBlend;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Iterator;
import javax.swing.DefaultListModel;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import sm.cdlt.images.BlendOP;
import sm.cdlt.images.MultiplicationOP;
import sm.cdlt.images.SubtractionOP;

/**
 * This class For contact with me visit https://www.sudano.net or send me a
 * email
 * <a href="mailto:cdelatorre@correo.ugr.es">Carlos de la Torre</a>
 *
 * @author <a href="mailto:cdelatorre@correo.ugr.es">Carlos de la Torre</a>
 * created on 01-may-2016
 */
public class QuestionsSelectImages extends Questions {

    /**
     * Variables que indican la operación que vamos a realizar
     */
    public static final int ADD = 1;
    public static final int SUBSTRACTION = 2;
    public static final int MULTIPLY = 3;
    /**
     * Variable que indica cual es la operación que se va a realizar
     */
    private int operation = 0;
    /**
     * Variable que almacena el modelo de datos de la lista de selección;
     */
    private final DefaultListModel<String> model_list = new DefaultListModel<String>();
    /**
     * Lista de imágenes que se van a mezclar
     */
    private final ArrayList<BufferedImage> images_to_mix = new ArrayList<>();
    /**
     * Variable que almacena toda la lista de ventanas internas que tiene la
     * ventana principal
     */
    private VentanaInternaImagen[] vi_lista;

    /**
     * Ventana modal que se encarga de hacer diferentes preguntas al usuario.
     *
     * @param parent [in] Este será el padre de la ventana modal
     * @param modal [in] Aquí indicamos el tipo de ventana modal que queremos:
     * si podemos pinchar fuera de ella sin seleccionar nada o por el contrario
     * tenemos que seleccionar algo para cerrar la ventana y continuar.
     */
    public QuestionsSelectImages(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        myInitComponent();
        initComponents();
        this.setContentDialog(this.jPanelContent);
    }

    /**
     * Esta es la inicialización de los componentes.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="My Initialized Code">/ /GEN-BEGIN:myInitComponents
    private void myInitComponent() {
        JInternalFrame[] aux_list = this.myParent.getEscritorio().getAllFrames();
        this.vi_lista = new VentanaInternaImagen[aux_list.length];
        String title;
        for (int i = 0; i < aux_list.length; i++) {
            title = aux_list[i].getTitle();
            this.vi_lista[i] = (VentanaInternaImagen) aux_list[i];
            if (title != null && !title.equals("")) {
                this.model_list.addElement(title);
            }
        }
    }// </editor-fold>/ /GEN-END:myInitComponents

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelContent = new javax.swing.JPanel();
        jScrollPane = new javax.swing.JScrollPane();
        jListWindows = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanelContent.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        jPanelContent.setPreferredSize(new java.awt.Dimension(300, 120));
        jPanelContent.setLayout(new javax.swing.BoxLayout(jPanelContent, javax.swing.BoxLayout.PAGE_AXIS));

        jListWindows.setModel(this.model_list);
        jListWindows.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListWindowsValueChanged(evt);
            }
        });
        jScrollPane.setViewportView(jListWindows);

        jPanelContent.add(jScrollPane);

        getContentPane().add(jPanelContent, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListWindowsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListWindowsValueChanged
        this.images_to_mix.clear();
        for (String val : this.jListWindows.getSelectedValuesList()) {
            for (VentanaInternaImagen vi : this.vi_lista) {
                if (vi.getTitle().equals(val)) {
                    this.images_to_mix.add(vi.getLienzo().getImage());
                }
            }
        }
    }//GEN-LAST:event_jListWindowsValueChanged

    @Override
    public void jButtonOkActionPerformed(java.awt.event.ActionEvent evt) {
        if (this.operation == 0) {
            throw new IllegalStateException("Before processing, it's necessary to assign one operation");
        }
        if (this.images_to_mix.size() < 2) {
            JOptionPane.showConfirmDialog(this, "Para poder utilizar este tipo de\noperación es necesario seleccionar\nmas imagenes", "Faltan Imagenes", JOptionPane.CLOSED_OPTION, JOptionPane.INFORMATION_MESSAGE);
        } else {
            int ancho, alto, type = BufferedImage.TYPE_INT_ARGB_PRE;
            ancho = alto = 0;
            BufferedImage aux;
            for (Iterator<BufferedImage> it = this.images_to_mix.iterator(); it.hasNext();) {
                aux = it.next();
                if (aux.getWidth() > ancho) {
                    ancho = aux.getWidth();
                }
                if (aux.getHeight() > alto) {
                    alto = aux.getHeight();
                }
            }
            VentanaInternaBlend vi = new VentanaInternaBlend(this.myParent, new Dimension(ancho, alto), type);
            
            switch (this.operation) {
                case 1:
                    BlendOP bop = new BlendOP();
                    vi.setOperation(bop, this.images_to_mix);
                    break;
                case 2:
                    SubtractionOP sop = new SubtractionOP();
                    vi.setOperation(sop, this.images_to_mix);
                    break;
                case 3:
                    MultiplicationOP mop = new MultiplicationOP();
                    vi.setOperation(mop, this.images_to_mix);
                    break;
                default:
                    throw new UnsupportedOperationException("Illegal operation, please, select a valid operation");
            }
            vi.setListener(new VentanaInternaListener(myParent));
            this.myParent.getEscritorio().add(vi);
            vi.setVisible(true);
            this.dispose();
        }
    }

    /*
    @TODO aunque ahora mismo esta asi lo ideal sería pasarle cual es el
    método que se va a realizar despúes de darle al botón de aceptar 
    habiendo seleccionado las imagenes, osea poner una lista desplegable
    de las posibles opciones a realizar y seleccionarla en el momento de 
    seleccionar las imágenes.
     */
    /**
     * Con este método podemos decirle a la ventana cual será la operación que
     * llevara a cabo después de seleccionar las diferentes imágenes.
     *
     * @param o [in] El número de la operación ha realizar.
     */
    public void setOperation(int o) {
        this.operation = o;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> jListWindows;
    private javax.swing.JPanel jPanelContent;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables
}
