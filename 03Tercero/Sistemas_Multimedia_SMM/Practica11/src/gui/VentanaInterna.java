package gui;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import javax.swing.JOptionPane;
import sm.cdlt.graphics.geoPoint;
import sm.cdlt.ui.Lienzo2DImage;

/**
 *
 * For contact with me visit https://www.sudano.net or send me a email
 *
 * @author <a href="mailto:cdelatorre@correo.ugr.es">Carlos de al Torre</a>
 * created on 14-abr-2016
 */
public class VentanaInterna extends javax.swing.JInternalFrame {

    /**
     * Para poder devolver mensajes a la ventana principal.
     */
    protected VentanaPrincipal myParent;
    /**
     * Variables que almacena el ancho y alto de la imagen que ponemos dentro de
     * la ventana.
     */
    private int image_width, image_heigth;
    /**
     * Variable que almacena cual es el tipo de imagen que queremos en el Lienzo
     */
    private int image_type;

    /**
     * Ponemos el constructor sin parametros para que netbeans pueda dibujar el
     * componente.
     */
    public VentanaInterna() {
        super();
        initComponents();
    }

    /**
     * Constructor para crear una ventana interna, se utilizan tres parámetros
     * para darle mas funcionalidad al programa, parent es para indicar cual es
     * el padre de la ventanainterna, d es la dimensión que queremos que tenga
     * la ventana interna, t es el tipo de imagenes que queremos crear entro de
     * la ventana interna
     *
     * @param parent [in] Este será el padre de la Ventana.
     * @param d [in] Objeto tipo Dimension que indica el tamaño de la imagen que
     * queremos dentro de la ventana.
     * @param t [in] Tipo entero que indica el tipo de la imagen a crear.
     */
    public VentanaInterna(VentanaPrincipal parent, Dimension d, int t) {
        super();
        // antes de que se inicialicen los componentes pongo el tamaño
        this.image_width = (int) d.getWidth();
        this.image_heigth = (int) d.getHeight();
        this.image_type = t;
        // inicializo los componentes incluido el lienzo
        initComponents();
        // añado el padre de la ventana
        this.myParent = parent;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPanel = new javax.swing.JScrollPane();
        JPanelLienzo = new sm.cdlt.ui.Lienzo2DImage(new Dimension(this.image_width, this.image_heigth),this.image_type);

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameActivated(evt);
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jScrollPanel.setBorder(null);

        JPanelLienzo.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                JPanelLienzoMouseMoved(evt);
            }
        });
        JPanelLienzo.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                JPanelLienzoComponentResized(evt);
            }
        });
        jScrollPanel.setViewportView(JPanelLienzo);

        getContentPane().add(jScrollPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Nos devuelve el Lienzo de la ventana Interna para poder cambiar sus
     * propiedades.
     *
     * @return Devuelve un objeto de tipo Lienzo2D que es donde pintamos.
     */
    public Lienzo2DImage getLienzo() {
        return this.JPanelLienzo;
    }

    /**
     * Con este método podemos asignar el lienzo que vamos a utilizar para
     * pintar la imagen.
     *
     * @param li [in] de tipo Lienzo2DImage sera en donde pintaremos las
     * imagenes.
     */
    public void setLienzo(Lienzo2DImage li) {
        this.JPanelLienzo = li;
        repaint();
    }

    /**
     * Con este método lo que hacemos es poner un panel en la parte izquierda de
     * la ventana por si queremos mostrar cualquier tipo de información, o
     * añadir algún tipo de funcionalidad extra.
     *
     * @param c [in] Será el panel con los controles que añadiremos
     */
    public void setLeftPanel(javax.swing.JPanel c) {
        getContentPane().add(c, java.awt.BorderLayout.WEST);
    }

    /**
     * Con este método lo que hacemos es poner un panel en la parte derecha de
     * la ventana por si queremos mostrar cualquier tipo de información, o
     * añadir algún tipo de funcionalidad extra.
     *
     * @param c [in] Será el panel con los controles que añadiremos
     */
    public void setRightPanel(javax.swing.JPanel c) {
        getContentPane().add(c, java.awt.BorderLayout.EAST);
    }

    private void formInternalFrameActivated(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameActivated
        // el grosor de la linea
        this.myParent.jSpinnerGrosor.setValue((int) this.JPanelLienzo.getStroke());
        // aquí ponemos si pintamos o movemos
        String aux_option = this.JPanelLienzo.whatOptionSelected();
        switch (aux_option) {
            case "paint":
                this.myParent.jToggleButtonPintar.setSelected(true);
                this.myParent.jLabelAccionRaton.setText(VentanaPrincipal.bundle.getString("MOUSE"));
                break;
            case "move":
                this.myParent.jToggleButtonMover.setSelected(true);
                this.myParent.jLabelAccionRaton.setText(VentanaPrincipal.bundle.getString("MOVE"));
                break;
            case "delete":
                this.myParent.jToggleButtonBorrar.setSelected(true);
                this.myParent.jLabelAccionRaton.setText(VentanaPrincipal.bundle.getString("DELETE"));
                break;
            default:
                break;
        }
        // si esta relleno
        if (this.JPanelLienzo.withFill()){
            this.myParent.getToggleButtonRelleno().setSelected(true);
        }else{
            this.myParent.getToggleButtonRelleno().setSelected(false);
        }
        // si aplicamos alisado
        this.myParent.jToggleButtonAntiAliasing.setSelected(this.JPanelLienzo.getFlatten());
        // si tiene transparencia
        this.myParent.jSpinnerTransparencia.setValue(this.JPanelLienzo.getAlpha());

        // el color que esta elegido
        if (this.JPanelLienzo.getColor().equals(Color.BLACK)) {
            this.myParent.jComboBoxColor.setSelectedItem(Color.BLACK);
        } else if (this.JPanelLienzo.getColor().equals(Color.WHITE)) {
            this.myParent.jComboBoxColor.setSelectedItem(Color.WHITE);
        } else if (this.JPanelLienzo.getColor().equals(Color.RED)) {
            this.myParent.jComboBoxColor.setSelectedItem(Color.RED);
        } else if (this.JPanelLienzo.getColor().equals(Color.GREEN)) {
            this.myParent.jComboBoxColor.setSelectedItem(Color.GREEN);
        } else if (this.JPanelLienzo.getColor().equals(Color.BLUE)) {
            this.myParent.jComboBoxColor.setSelectedItem(Color.BLUE);
        } else if (this.JPanelLienzo.getColor().equals(Color.YELLOW)) {
            this.myParent.jComboBoxColor.setSelectedItem(Color.YELLOW);
        }
        this.myParent.jLabelColor.setText(VentanaPrincipal.bundle.getString("COLOR")
                + "[R: " + ((Color) this.myParent.jComboBoxColor.getSelectedItem()).getRed()
                + " G: " + ((Color) this.myParent.jComboBoxColor.getSelectedItem()).getGreen()
                + " B: " + ((Color) this.myParent.jComboBoxColor.getSelectedItem()).getBlue() + "]");
        // la herramienta que esta elegida
        switch (this.JPanelLienzo.getTool()) {
            case "point":
                this.myParent.jToggleButtonPunto.setSelected(true);
                this.myParent.jLabelHerramienta.setText(VentanaPrincipal.bundle.getString("TOOL_POINT"));
                break;
            case "line":
                this.myParent.jToggleButtonLinea.setSelected(true);
                this.myParent.jLabelHerramienta.setText(VentanaPrincipal.bundle.getString("TOOL_LINE"));
                break;
            case "rect":
                this.myParent.jToggleButtonRectangulo.setSelected(true);
                this.myParent.jLabelHerramienta.setText(VentanaPrincipal.bundle.getString("TOOL_RECT"));
                break;
            case "oval":
                this.myParent.jToggleButtonCirculo.setSelected(true);
                this.myParent.jLabelHerramienta.setText(VentanaPrincipal.bundle.getString("TOOL_CIRCLE"));
                break;
        }
    }//GEN-LAST:event_formInternalFrameActivated

    private void JPanelLienzoMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JPanelLienzoMouseMoved
        this.myParent.jLabelMousePos.setText(VentanaPrincipal.bundle.getString("MOUSE_POS") + " (" + (int) evt.getPoint().getX() + ":" + (int) evt.getPoint().getY() + ")");
        int[] pixel = this.JPanelLienzo.getColorInPos(new geoPoint(evt.getPoint().getX(), evt.getPoint().getY()));
        // para el blanco y negro
        if (pixel.length < 3) {
            this.myParent.jLabelMouseColorPos.setText(VentanaPrincipal.bundle.getString("COLOR_POS") + " [W/B: " + pixel[0] + "]");
        } else {
            this.myParent.jLabelMouseColorPos.setText(VentanaPrincipal.bundle.getString("COLOR_POS")
                    + " [R: " + pixel[0]
                    + " G: " + pixel[1]
                    + " B: " + pixel[2]
                    + " ]");
        }
        if (this.myParent.jToggleButtonPintar.isSelected()) {
            this.JPanelLienzo.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        } else if (this.myParent.jToggleButtonMover.isSelected()) {
            this.JPanelLienzo.setCursor(new Cursor(Cursor.MOVE_CURSOR));
        } else {
            this.JPanelLienzo.setCursor(Cursor.getDefaultCursor());
        }
        repaint();
    }//GEN-LAST:event_JPanelLienzoMouseMoved

    /**
     * Este método sirve para el redimencionado de la ventana.
     *
     * Como las ventanas internas de java no tienen un evento de resize utilizo
     * el panel que sirve como lienzo para usar su evento resize y como la
     * ventanta tiene un BorderLayout pues se redimenciona a la par que la
     * ventana interna.
     *
     * Simpremente cojo la imagen que tiene el lienzo y la vuelvo a setear de
     * esa manera como el evento de setImage auto calcula la posición de la
     * imagen correcta segun el tamaño del lienzo solo se calcula la posición de
     * la imagen cuando se setea.
     *
     * @param evt [in] datos del evento al redimensionar la ventana.
     */
    private void JPanelLienzoComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_JPanelLienzoComponentResized
        this.JPanelLienzo.setImage(this.JPanelLienzo.getImage());
    }//GEN-LAST:event_JPanelLienzoComponentResized

    protected void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        int n = JOptionPane.showConfirmDialog(this, "¿Seguro que quiere perder\ntodos los cambios realizados?", "Cerrar Ventana", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        // son 2 botones el si=0, el no=1
        if (n == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_formInternalFrameClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected sm.cdlt.ui.Lienzo2DImage JPanelLienzo;
    private javax.swing.JScrollPane jScrollPanel;
    // End of variables declaration//GEN-END:variables
}
